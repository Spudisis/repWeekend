/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/user/': {
    /** Get all users without password field. */
    get: operations['read_all_users_api_user__get'];
    /** Create user */
    post: operations['create_user_api_user__post'];
  };
  '/api/user/{user_id}': {
    /** Read specific user without password field. */
    get: operations['read_user_api_user__user_id__get'];
    /** Delete specific user */
    delete: operations['delete_user_api_user__user_id__delete'];
  };
  '/api/user/{username}': {
    /** Read specific user by username without password field. */
    get: operations['read_user_by_username_api_user__username__get'];
  };
  '/api/user/password': {
    /** Change password. */
    patch: operations['change_password_api_user_password_patch'];
  };
  '/api/user/user': {
    /** Update specific user without password field. */
    patch: operations['update_user_api_user_user_patch'];
  };
  '/api/user/notification': {
    /** Receiving notifications by the user. */
    post: operations['get_notification_api_user_notification_post'];
    /** Mark notifications as read by the user. */
    patch: operations['mark_as_read_api_user_notification_patch'];
  };
  '/api/user/set-otp': {
    /** Install OTP. */
    post: operations['set_otp_api_user_set_otp_post'];
  };
  '/api/user/unplug-otp': {
    /** Unplug OTP. */
    patch: operations['unplug_otp_api_user_unplug_otp_patch'];
  };
  '/api/user/{user_id}/avatar': {
    /** Upload new user avatar. */
    post: operations['update_avatar_api_user__user_id__avatar_post'];
  };
  '/api/auth/login': {
    /** Route for authorize. */
    post: operations['auth_user_api_auth_login_post'];
  };
  '/api/auth/refresh': {
    /** Get new tokens pair. */
    post: operations['create_new_token_pair_api_auth_refresh_post'];
  };
  '/api/auth/me': {
    /** Read data from access token. */
    get: operations['get_me_api_auth_me_get'];
  };
  '/api/auth/captcha': {
    /** Captcha. */
    get: operations['captcha_api_auth_captcha_get'];
  };
  '/api/country/': {
    /** Get all countries. */
    get: operations['read_all_countries_api_country__get'];
  };
  '/api/country/{country_id}': {
    /** Read specific country. */
    get: operations['read_country_api_country__country_id__get'];
  };
  '/api/country/{title}': {
    /** Read specific country by name. */
    get: operations['read_country_by_name_api_country__title__get'];
  };
  '/api/city/': {
    /** Get all cities. */
    get: operations['read_all_cities_api_city__get'];
  };
  '/api/city/{city_id}': {
    /** Read specific city. */
    get: operations['read_city_api_city__city_id__get'];
  };
  '/api/city/{city_name}': {
    /** Read specific city by name. */
    get: operations['read_city_by_name_api_city__city_name__get'];
  };
  '/api/category/': {
    /** Get all categories. */
    get: operations['read_all_categories_api_category__get'];
    /** Create category */
    post: operations['create_category_api_category__post'];
  };
  '/api/category/{category_id}': {
    /** Read specific category by id. */
    get: operations['read_category_api_category__category_id__get'];
  };
  '/api/category/{category_name}': {
    /** Read specific category by name. */
    get: operations['read_category_by_name_api_category__category_name__get'];
  };
  '/api/subcategory/': {
    /** Get all subcategories. */
    get: operations['read_all_subcategories_api_subcategory__get'];
    /** Create subcategory */
    post: operations['create_subcategory_api_subcategory__post'];
  };
  '/api/subcategory/{subcategory_id}': {
    /** Read specific subcategory by id. */
    get: operations['read_subcategory_api_subcategory__subcategory_id__get'];
  };
  '/api/subcategory/{subcategory_name}': {
    /** Read specific subcategory by name. */
    get: operations['read_subcategory_by_name_api_subcategory__subcategory_name__get'];
  };
  '/api/price/': {
    /** Get currency prices. */
    get: operations['read_price_api_price__get'];
  };
  '/api/ticket': {
    get: operations['read_all_tickets_api_ticket_get'];
  };
  '/api/': {
    post: operations['create_ticket_api__post'];
  };
  '/api/ticket-response': {
    post: operations['create_ticket_response_api_ticket_response_post'];
  };
  '/api/ticket/{ticket_id}': {
    get: operations['read_ticket_api_ticket__ticket_id__get'];
  };
  '/api/admin-notification/': {
    /** Creates a notification for all users. */
    post: operations['create_notification_for_all_api_admin_notification__post'];
  };
  '/api/admin-notification/specific': {
    /** Creates notification for users. */
    post: operations['create_notification_for_users_api_admin_notification_specific_post'];
  };
  '/api/favorites/all': {
    /** Read all user favorites. */
    get: operations['read_all_favorites_api_favorites_all_get'];
  };
  '/api/favorites/add': {
    /** Add user favorites. */
    post: operations['add_favorite_api_favorites_add_post'];
  };
  '/api/favorites/delete': {
    /** Delete user favorite. */
    post: operations['del_favorite_api_favorites_delete_post'];
  };
  '/api/cart/add': {
    /** Add product in cart */
    post: operations['add_product_to_cart_api_cart_add_post'];
  };
  '/api/cart/': {
    /** Read product in cart */
    get: operations['read_products_to_cart_api_cart__get'];
  };
  '/api/cart/remove': {
    /** Remove product from cart */
    post: operations['remove_product_from_cart_api_cart_remove_post'];
  };
  '/api/review/{product_id}': {
    /** Read product reviews. */
    get: operations['read_product_reviews_api_review__product_id__get'];
  };
  '/api/photo/{photo}': {
    /** Get photo. */
    get: operations['read_photo_api_photo__photo__get'];
  };
  '/api/v1/pay/user/{user_id}/balance': {
    /** User Balance */
    get: operations['user_balance_api_v1_pay_user__user_id__balance_get'];
  };
  '/api/v1/pay/deal/': {
    /** Create Deal */
    post: operations['create_deal_api_v1_pay_deal__post'];
  };
  '/api/v1/pay/deal/{deal_id}/confirm': {
    get: operations['confirm_deal_api_v1_pay_deal__deal_id__confirm_get'];
  };
  '/api/v1/pay/deal/{deal_id}/deny': {
    get: operations['deny_deal_api_v1_pay_deal__deal_id__deny_get'];
  };
  '/api/v1/pay/deal/{deal_id}/dispute': {
    /** Create Dispute */
    post: operations['create_dispute_api_v1_pay_deal__deal_id__dispute_post'];
  };
  '/api/v1/pay/deal/{deal_id}/dispute/close_customer': {
    get: operations['close_dispute_customer_api_v1_pay_deal__deal_id__dispute_close_customer_get'];
  };
  '/api/v1/pay/deal/{deal_id}/dispute/close_performer': {
    get: operations['close_dispute_performer_api_v1_pay_deal__deal_id__dispute_close_performer_get'];
  };
  '/api/v1/pay/deal/{deal_id}/close': {
    get: operations['close_deal_api_v1_pay_deal__deal_id__close_get'];
  };
  '/api/v1/pay/payment/gateways': {
    /** Payment Gateway List */
    get: operations['gateways_list_api_v1_pay_payment_gateways_get'];
  };
  '/api/v1/pay/payment/deposit': {
    post: operations['deposit_api_v1_pay_payment_deposit_post'];
  };
  '/api/v1/pay/payment/withdraw': {
    post: operations['withdraw_api_v1_pay_payment_withdraw_post'];
  };
  '/api/market/': {
    /** Get all markets. */
    get: operations['read_all_markets_api_market__get'];
  };
  '/api/market/{market_id}/products': {
    /** Read market products. */
    get: operations['read_market_products_api_market__market_id__products_get'];
  };
}

export interface components {
  schemas: {
    /**
     * AddFavoriteCommand
     * @description Base schema for Favorites.
     */
    AddFavoriteCommand: {
      /**
       * Product Id
       * @description Product ID.
       * @example 2
       */
      product_id: number;
    };
    /** AddItemToCart */
    AddItemToCart: {
      /**
       * Product Id
       * @default 1
       */
      product_id?: number;
      /**
       * Quantity
       * @default 1
       */
      quantity?: number;
    };
    /**
     * Auth
     * @description Base model for auth.
     */
    Auth: {
      /**
       * Access Token
       * Format: password
       * @description Bearer access token
       * @example exam.ple.token
       */
      access_token: string;
      /**
       * Refresh Token
       * Format: password
       * @description Bearer refresh token
       * @example exam.ple.token
       */
      refresh_token: string;
      /**
       * Token Type
       * @default bearer
       */
      token_type?: string;
    };
    /**
     * AuthCommand
     * @description Base model for auth.
     */
    AuthCommand: {
      /**
       * Username
       * @description User Login
       * @example goodman
       */
      username: string;
      /**
       * Password
       * @description User password
       * @example password
       */
      password: string;
      /**
       * Uid Captcha
       * @description Unique ID captcha
       * @example d22dee4f-44af-4b25-831a-5ba7bc75bca4
       */
      uid_captcha: string;
      /**
       * Value Captcha
       * @description Value captcha
       * @example 51iu6v9s
       */
      value_captcha: string;
      /**
       * Otp Code
       * @description Generated OTP code
       * @default
       * @example 519452
       */
      otp_code?: string;
    };
    /**
     * BTC
     * @description Base model for price.
     */
    BTC: {
      /**
       * Btcusdt
       * @description Price USDT
       * @example 1
       */
      BTCUSDT: Partial<number> & Partial<number>;
      /**
       * Btcrub
       * @description Price RUB
       * @example 1
       */
      BTCRUB: Partial<number> & Partial<number>;
    };
    /** Body_update_avatar_api_user__user_id__avatar_post */
    Body_update_avatar_api_user__user_id__avatar_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** CaptchaWithoutValue */
    CaptchaWithoutValue: {
      /**
       * Uid
       * Format: uuid4
       */
      uid: string;
      /** Image */
      image: string;
    };
    /**
     * CategoriesWithPagination
     * @description Base model for category.
     */
    CategoriesWithPagination: {
      /** Items */
      items: components['schemas']['Category'][];
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /**
     * Category
     * @description Base model for category.
     */
    Category: {
      /**
       * Id
       * @description Category ID
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description Category name
       * @example non-food
       */
      name: string;
    };
    /**
     * ChangeUserPasswordCommand
     * @description Base model for user.
     */
    ChangeUserPasswordCommand: {
      /**
       * Old Password
       * @description Old user password.
       * @example password
       */
      old_password: string;
      /**
       * New Password
       * @description New user password.
       * @example password
       */
      new_password: string;
    };
    /**
     * CitiesWithPagination
     * @description Base model for city.
     */
    CitiesWithPagination: {
      /** Items */
      items: components['schemas']['City'][];
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /**
     * City
     * @description Base model for city.
     */
    City: {
      /**
       * Id
       * @description City ID
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description City name
       * @example dimitrovgrad
       */
      name: string;
      /**
       * Country Id
       * @description Country ID
       * @example 2
       */
      country_id: number;
    };
    /**
     * CityWithoutCountryID
     * @description Base model for city.
     */
    CityWithoutCountryID: {
      /**
       * Id
       * @description City ID
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description City name
       * @example dimitrovgrad
       */
      name: string;
    };
    /**
     * CountriesWithPagination
     * @description Base model for country.
     */
    CountriesWithPagination: {
      /**
       * Items
       * @default []
       */
      items?: Partial<components['schemas']['CountryWithCities'][]> & Partial<components['schemas']['Country'][]>;
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /**
     * Country
     * @description Base model for country.
     */
    Country: {
      /**
       * Id
       * @description Country ID.
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description Country name
       * @example russia
       */
      name: string;
    };
    /**
     * CountryWithCities
     * @description Base model for country.
     */
    CountryWithCities: {
      /**
       * Id
       * @description Country ID.
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description Country name
       * @example russia
       */
      name: string;
      /**
       * Cities
       * @default []
       */
      cities?: Partial<components['schemas']['CityWithoutCountryID'][]> & Partial<unknown[]>;
    };
    /**
     * CreateCategoryCommand
     * @description Base model for category.
     */
    CreateCategoryCommand: {
      /**
       * Name
       * @description Category name
       * @example non-food
       */
      name: string;
    };
    /**
     * CreateNotificationCommand
     * @description Base model for notification.
     */
    CreateNotificationCommand: {
      /**
       * Name
       * @description Notification name, title
       * @example all for packing
       */
      name: string;
      /**
       * Sender
       * @description Sender name
       * @example administration
       */
      sender: string;
      /**
       * Whom
       * @description What kind of notification?
       * @example alerts to everyone
       */
      whom: string;
      /**
       * Text
       * @description Text notification
       * @example text notification
       */
      text: string;
    };
    /**
     * CreateNotificationUsersCommand
     * @description Base model for notification.
     */
    CreateNotificationUsersCommand: {
      /**
       * User Ids
       * @description User ids.
       * @example [
       *   2,
       *   4,
       *   50
       * ]
       */
      user_ids: (Partial<number> & Partial<string>)[];
      /**
       * Name
       * @description Notification name, title
       * @example all for packing
       */
      name: string;
      /**
       * Sender
       * @description Sender name
       * @example administration
       */
      sender: string;
      /**
       * Whom
       * @description What kind of notification?
       * @example alerts to everyone
       */
      whom: string;
      /**
       * Text
       * @description Text notification
       * @example text notification
       */
      text: string;
    };
    /**
     * CreateSubcategoryCommand
     * @description Base model for subcategory.
     */
    CreateSubcategoryCommand: {
      /**
       * Name
       * @description Subcategory name
       * @example smartphones
       */
      name: string;
      /**
       * Category Id
       * @description Category ID
       * @example 1
       */
      category_id: number;
    };
    /**
     * CreateTicketCommand
     * @description Base model for ticket.
     */
    CreateTicketCommand: {
      /**
       * Tag
       * @description Ticket tag.
       * @example Question
       */
      tag: string;
      /**
       * Content
       * @description Content.
       * @example How to buy?
       */
      content: string;
    };
    /**
     * CreateTicketResponseCommand
     * @description Base model for ticket.
     */
    CreateTicketResponseCommand: {
      /**
       * Ticket Id
       * @description ID.
       * @example 2
       */
      ticket_id: number;
      /**
       * Content
       * @description Content.
       * @example How to buy?
       */
      content: string;
    };
    /**
     * CreateUserCommand
     * @description Base model for user.
     */
    CreateUserCommand: {
      /**
       * Username
       * @description User Login
       * @example goodman
       */
      username: string;
      /**
       * Password
       * @description User password
       * @example password
       */
      password: string;
      /**
       * @description User role.
       * @example user
       */
      role_name?: components['schemas']['UserRole'];
      /**
       * Uid Captcha
       * @description Unique ID captcha
       * @example d22dee4f-44af-4b25-831a-5ba7bc75bca4
       */
      uid_captcha: string;
      /**
       * Value Captcha
       * @description Value captcha
       * @example 51iu6v9s
       */
      value_captcha: string;
    };
    /**
     * Currency
     * @description An enumeration.
     * @enum {string}
     */
    Currency: 'usdt';
    /**
     * DealConfirmResponseSchema
     * @description Response schema after confirm deal
     */
    DealConfirmResponseSchema: {
      /** Id */
      id: number;
    };
    /**
     * DealCreateResponseSchema
     * @description Response schema after create Deal
     */
    DealCreateResponseSchema: {
      /** Id */
      id: number;
      /** @default common */
      deal_type?: components['schemas']['DealType'];
    };
    /**
     * DealCreateSchema
     * @description Create Deal schema
     */
    DealCreateSchema: {
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Price */
      price: number;
      /** @default usdt */
      currency?: components['schemas']['Currency'];
      /**
       * Deadline At
       * Format: date-time
       */
      deadline_at?: string;
      /** Customer Id */
      customer_id: number;
      /** Performer Id */
      performer_id: number;
    };
    /**
     * DealType
     * @description An enumeration.
     * @enum {string}
     */
    DealType: 'common';
    /**
     * DelFavoriteCommand
     * @description Base schema for Favorites.
     */
    DelFavoriteCommand: {
      /**
       * Product Id
       * @description Product ID.
       * @example 2
       */
      product_id: number;
    };
    /**
     * DisputeCreateSchema
     * @description Create dispute schema
     */
    DisputeCreateSchema: {
      /** Title */
      title: string;
      /** Description */
      description: string;
    };
    /**
     * Favorite
     * @description Base schema for Favorites.
     */
    Favorite: {
      /**
       * Id
       * @description Row ID.
       * @example 2
       */
      id: number;
      /**
       * User Id
       * @description User id.
       * @example 2
       */
      user_id: number;
      /**
       * Product Id
       * @description Product ID.
       * @example 2
       */
      product_id: number;
    };
    /**
     * FavoritesWithPagination
     * @description Base schema for Favorites.
     */
    FavoritesWithPagination: {
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
      /** Items */
      items: components['schemas']['Favorite'][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * MarkAsReadNotificationCommand
     * @description Base model for notification.
     */
    MarkAsReadNotificationCommand: {
      /**
       * Uid Notifications
       * @description Mark notifications as read by the user
       * @example [
       *   1,
       *   51,
       *   94
       * ]
       */
      uid_notifications: (Partial<number> & Partial<string>)[];
    };
    /**
     * Market
     * @description Base model for market.
     */
    Market: {
      /**
       * Id
       * @description Product id.
       * @example 2
       */
      id: number;
      /**
       * Owner Id
       * @description User id.
       * @example 2
       */
      owner_id: number;
      /** Name */
      name: string;
      /**
       * Avatar
       * @description URI photo of market.
       * @example https://img.desktopwallpapers.ru/animals/pics/wide/1920x1200/6369fc18cca723f6a53f8730d420e7ee.jpg
       */
      avatar?: Partial<string> & Partial<string>;
      /** Description */
      description?: string;
      /** Raw Description */
      raw_description?: string;
      /**
       * Is Enabled
       * @default true
       */
      is_enabled?: boolean;
      /** Rating */
      rating: number;
      /**
       * Created
       * Format: date-time
       * @description When the market registered ?
       * @example 2022-09-21 12:00:00
       */
      created: string;
    };
    /**
     * Notification
     * @description Base model for notification.
     */
    Notification: {
      /**
       * Id
       * @description Notification ID
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description Notification name, title
       * @example all for packing
       */
      name: string;
      /**
       * Sender
       * @description Sender name
       * @example administration
       */
      sender: string;
      /**
       * Whom
       * @description What kind of notification?
       * @example alerts to everyone
       */
      whom: string;
      /**
       * Text
       * @description Text notification
       * @example text notification
       */
      text: string;
      /**
       * Created
       * Format: date-time
       * @description Creation time
       * @example 2023-02-17 15:18:01
       */
      created: string;
    };
    /**
     * NotificationsWithPagination
     * @description Base model for notification.
     */
    NotificationsWithPagination: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['Notification'][];
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /**
     * OTP
     * @description Base model for OTP.
     */
    OTP: {
      /**
       * Otp
       * @description OTP key-secret
       * @example DJ6OERKWPG4YMKOLPZ3ETMGVGG6GDOER
       */
      otp: string;
      /**
       * Qr
       * @description QR image in base64
       * @example iVBORw0KGgoAAAANSUhEUgAAAcIAAAHCAQAAAABUY/ToAAADoElEQVR4nO2cW4rkOgyGPx0H6jGBXkAvJdnBLOnQO4uX0gsYSB4HXPznwZck1TUcmOmiLkhQJkn5ww4ISZbsmPgzif/8IQhOOumkk0466aSTj0dakQ5YzWxazfIf+ao+yzLdebZOPiQ5SpIWMBuCoE+YDWcDgmzqE5oJkiQdyXvM1smHJNdiXzT3v0zz2sG4BAFn00zImlNM1d1n6+RDk+NnB/E9AWuHZshXNt1uTCefmuwu7o1eGHQQB0xxAuKEifW7xnTyNcle0gxozuF0EOMCjErY1CdsAiSl7xvTyZcio5mZDWD/LlV9cji9nsT4ecqRkZmVBduTvqeTNyDRFclmKducPkE2S8c+83O9p5O3I7MO5TXYuARpzl6tLMSkJYhRqfarV65DTjapulEb+pSjoJoQqupDn9Dcl36uQ05WyesyxWEB1rek+CMI1rccADHOQUa/AAQZ1HDoyd7TyduR1TO1JPSoRLFIhKNXA829+zInL6XGQzX22VwWx2ZcQi6HuC9z8ii1BBakuYZCRWnU1Ecte9Qn1yEnL2SnQ2qWpuQYw8EO5bJs8JjayQup+Z6WC2qWRkvxb9kEbW7M4yEnD7LF1CU/VKPrcrU0Rap5R9chJ49S9QVqdrqqT2lgC6c9P+TkFdn5slxkXZrm5Gc10Tj3yWNqJ69JC3BqIWMha9PeGPX7cNp1yMlrZByAaCfZRJA+hrKFEfpfVrucTR/D2Yrje8r3dPIGZK51GBiKPxbImpOfhWRwEqxdsnEZAIJsnO81WycfkfwSD21r+5ysbpmiUe3WfZmTe9l0aBc6X2QbAbZtjb62d/IKWY+WnYqlie8J4hCkmbPtNoXEAWy682ydfEQy5xjjeyrnOgC2DbFE69CHnWoe6VvGdPJVyP0eNGi7OxYoFXzC7t8sHg85eZB9rWOrcNTjGzmpWK681uHkNSlr+1Eg1rdk4/IGcQLof1a31v/s9lsY/3JMJ1+LvDzXse03Iy/J2m1LUbsvc/IKuX33o2w1Yx8Z5cUZa5fPod19tk4+JDlKLSFE/uSHTZSG+L4d+GhF/qd8TydvQO72U9eNi6ntPNs3pbvX7Z38P1L6PMmmdj8uZ6tnPQ7Zo4eYrZOPQH797kf+nXOjOIUE60A1RCHZ347p5GuRuxxjqZJpO1oGXxo/X+bkF6lKA5Si/D5PXZvapZ1gdB1ysko5K93uVbNC23MdurTo+rne00knnXTSSSeddPJ38h+SuH7F25wOtAAAAABJRU5ErkJggg==
       */
      qr: string;
      /**
       * Type Qr Image
       * @default png
       */
      type_qr_image?: string;
    };
    /**
     * PaymentDepositRequest
     * @description Deposit payment schema
     */
    PaymentDepositRequest: {
      /** Gateway Id */
      gateway_id: number;
      /** Amount */
      amount: number;
      /** User Id */
      user_id: number;
      currency: components['schemas']['Currency'];
    };
    /**
     * PaymentDepositResponse
     * @description Response schema after deposit
     */
    PaymentDepositResponse: {
      /** Amount */
      amount: number;
      currency: components['schemas']['Currency'];
      status: components['schemas']['PaymentStatus'];
      /**
       * Gateway Data
       * @default {}
       */
      gateway_data?: { [key: string]: unknown };
    };
    /**
     * PaymentGatewayResponse
     * @description Response schema for payment gateways
     */
    PaymentGatewayResponse: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** Logo */
      logo?: string;
      currency: components['schemas']['Currency'][];
    };
    /**
     * PaymentStatus
     * @description An enumeration.
     * @enum {string}
     */
    PaymentStatus: 'waiting' | 'success' | 'error';
    /** PaymentWithdrawRequest */
    PaymentWithdrawRequest: {
      /** Gateway Id */
      gateway_id: number;
      /** Amount */
      amount: number;
      /** User Id */
      user_id: number;
      currency: components['schemas']['Currency'];
      /** Data */
      data: { [key: string]: unknown };
    };
    /**
     * Price
     * @description Base model for price.
     */
    Price: {
      BTC: components['schemas']['BTC'];
    };
    /**
     * Product
     * @description Base model for market.
     */
    Product: {
      /**
       * Id
       * @description Product id.
       * @example 2
       */
      id: number;
      /**
       * Market Id
       * @description Market id.
       * @example 2
       */
      market_id: number;
      /**
       * Name
       * @description Name of product.
       * @example Car
       */
      name: string;
      /**
       * Category Id
       * @description Category of product.
       * @example 2
       */
      category_id: number;
      /**
       * Sub Category Id
       * @description Sub-category of product.
       * @example 3
       */
      sub_category_id?: number;
      /**
       * Photos
       * @description UUID of photos.
       * @example [
       *   "d255db61-ad5e-4ef8-8ad8-e545f7937535",
       *   "e9846fec-cfb0-4b15-9b3c-1ef9c3a6a233",
       *   "fb52dffd-8109-4960-9379-a16dc32be3e3"
       * ]
       */
      photos?: string[];
      /**
       * Is Enabled
       * @description Disabled by admin ?
       * @default true
       * @example true
       */
      is_enabled?: boolean;
      /**
       * Is Active
       * @description Pused by user ?
       * @default false
       * @example false
       */
      is_active?: boolean;
      /**
       * Description
       * @description Description of product.
       * @example Such a nice car.
       */
      description: string;
      /**
       * Raw Description
       * @description HTML description.
       */
      raw_description: string;
      /**
       * Price
       * @description Price of product.
       * @example 3500
       */
      price: number;
      /**
       * Weight
       * @description Weight of product.
       * @example 0.01
       */
      weight?: number;
      /**
       * Created
       * Format: date-time
       * @description When the product created ?
       * @example 2022-09-21 12:00:00
       */
      created: string;
    };
    /**
     * ReadNotificationQuery
     * @description Base model for notification.
     */
    ReadNotificationQuery: {
      /**
       * View
       * @description Viewed Notifications?
       * @example false
       */
      view: boolean;
      /**
       * Limit
       * @default 10
       */
      limit?: number;
      /**
       * Offset
       * @default 0
       */
      offset?: number;
    };
    /** RemoveProductFromCart */
    RemoveProductFromCart: {
      /**
       * Product Id
       * @default 1
       */
      product_id?: number;
      /**
       * Quantity
       * @default 1
       */
      quantity?: number;
    };
    /**
     * Review
     * @description Base model for market.
     */
    Review: {
      /**
       * Id
       * @description Review ID.
       * @example 2
       */
      id: number;
      /**
       * Owner Id
       * @description ID of user writer review.
       * @example 2
       */
      owner_id: number;
      /**
       * Product Id
       * @description ID of reviewed product.
       * @example 2
       */
      product_id: number;
      /**
       * Text
       * @description Review text.
       * @example Car is good.
       */
      text?: string;
      /**
       * Rate
       * @description Product rate.
       * @example 3
       */
      rate: number;
      /**
       * Created
       * Format: date-time
       * @description When the review created?
       * @example 2022-09-21 12:00:00
       */
      created: string;
    };
    /**
     * SortBy
     * @description An enumeration.
     * @enum {undefined}
     */
    SortBy: 'rating';
    /**
     * SubcategoriesWithPagination
     * @description Base model for subcategory.
     */
    SubcategoriesWithPagination: {
      /** Items */
      items: components['schemas']['Subcategory'][];
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /**
     * Subcategory
     * @description Base model for subcategory.
     */
    Subcategory: {
      /**
       * Id
       * @description Subcategory ID
       * @example 2
       */
      id: number;
      /**
       * Name
       * @description Subcategory name
       * @example smartphones
       */
      name: string;
      /**
       * Category Id
       * @description Category ID
       * @example 1
       */
      category_id: number;
    };
    /**
     * Ticket
     * @description Base model for ticket.
     */
    Ticket: {
      /**
       * Id
       * @description ID.
       * @example 2
       */
      id: number;
      /**
       * Tag
       * @description Ticket tag.
       * @example Question
       */
      tag: string;
      /**
       * Content
       * @description Content.
       * @example How to buy?
       */
      content: string;
      /**
       * @description Status.
       * @example new
       */
      status: components['schemas']['TicketStatus'];
      /**
       * Sender Id
       * @description User id.
       * @example 2
       */
      sender_id: number;
      /**
       * Created
       * Format: date-time
       * @description When the ticket created?
       * @example 2022-09-21 12:00:00
       */
      created: string;
    };
    /**
     * TicketStatus
     * @description Status for TicketModel status field.
     * @enum {string}
     */
    TicketStatus: 'new' | 'active' | 'closed';
    /**
     * TicketsWithPagination
     * @description Base model for ticket.
     */
    TicketsWithPagination: {
      /** Items */
      items: components['schemas']['Ticket'][];
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /**
     * UnplugOTPCommand
     * @description Base model for OTP.
     */
    UnplugOTPCommand: {
      /**
       * Otp Code
       * @description Generated OTP code
       * @default
       * @example 519452
       */
      otp_code?: string;
    };
    /**
     * UpdateUserCommand
     * @description Base model for user.
     */
    UpdateUserCommand: {
      /**
       * @description User role.
       * @example user
       */
      role_name?: components['schemas']['UserRole'];
      /**
       * Is Seller
       * @description The seller?
       * @example false
       */
      is_seller?: boolean;
      /**
       * Btc Address
       * @description Address btc.
       * @example 3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy
       */
      btc_address?: string;
      /**
       * City Id
       * @description User city ID
       * @example 2
       */
      city_id?: number;
      /**
       * Avatar
       * Format: uuid4
       * @description UUID user photo.
       * @example d22dee4f-44af-4b25-831a-5ba7bc75bca4
       */
      avatar?: string;
      /**
       * Is Banned
       * @description Banned?
       * @example false
       */
      is_banned?: boolean;
      /**
       * User Ban Date
       * Format: date-time
       * @description If banned, until what time?
       * @example 2023-09-21 12:00:00
       */
      user_ban_date?: string;
    };
    /**
     * User
     * @description Base model for user.
     */
    User: {
      /**
       * Id
       * @description User id.
       * @example 2
       */
      id: number;
      /**
       * Username
       * @description User Login
       * @example goodman
       */
      username: string;
      /**
       * @description User role.
       * @example user
       */
      role_name?: components['schemas']['UserRole'];
      /**
       * Is Seller
       * @description The seller?
       * @example false
       */
      is_seller?: boolean;
      /**
       * Btc Balance
       * @description Quantity btc.
       * @example 1051
       */
      btc_balance?: number;
      /**
       * Btc Address
       * @description Address btc.
       * @example 3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy
       */
      btc_address?: string;
      /**
       * City Id
       * @description User city ID
       * @example 2
       */
      city_id?: number;
      /**
       * Avatar
       * Format: uuid4
       * @description UUID user photo.
       * @example d22dee4f-44af-4b25-831a-5ba7bc75bca4
       */
      avatar?: string;
      /**
       * Created
       * Format: date-time
       * @description When the user registered?
       * @example 2022-09-21 12:00:00
       */
      created: string;
      /**
       * Is Banned
       * @description Banned?
       * @example false
       */
      is_banned?: boolean;
      /**
       * User Ban Date
       * Format: date-time
       * @description If banned, until what time?
       * @example 2023-09-21 12:00:00
       */
      user_ban_date?: string;
    };
    /**
     * UserBalanceResponseSchema
     * @description Response schema for user balance
     */
    UserBalanceResponseSchema: {
      currency: components['schemas']['Currency'];
      /** Balance */
      balance: number;
    };
    /**
     * UserRole
     * @description An enumeration.
     * @enum {string}
     */
    UserRole: 'user' | 'admin';
    /**
     * UsersWithPagination
     * @description Base model for user.
     */
    UsersWithPagination: {
      /** Items */
      items: components['schemas']['User'][];
      /**
       * Total
       * @description Total items in the selection.
       * @example 101
       */
      total: number;
      /**
       * Page
       * @description Current page.
       * @example 2
       */
      page: number;
      /**
       * Size
       * @description Requested number of items per page.
       * @example 10
       */
      size: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (Partial<string> & Partial<number>)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * TicketResponseModel
     * @description Model for response on ticket.
     */
    'efmarketplace.db.models.ticket.TicketResponseModel.leaf': {
      /** Id */
      id: number;
      /** Content */
      content: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
    };
  };
}

export interface operations {
  /** Get all users without password field. */
  read_all_users_api_user__get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UsersWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create user */
  create_user_api_user__post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserCommand'];
      };
    };
  };
  /** Read specific user without password field. */
  read_user_api_user__user_id__get: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Delete specific user */
  delete_user_api_user__user_id__delete: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific user by username without password field. */
  read_user_by_username_api_user__username__get: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Change password. */
  change_password_api_user_password_patch: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeUserPasswordCommand'];
      };
    };
  };
  /** Update specific user without password field. */
  update_user_api_user_user_patch: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserCommand'];
      };
    };
  };
  /** Receiving notifications by the user. */
  get_notification_api_user_notification_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['NotificationsWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReadNotificationQuery'];
      };
    };
  };
  /** Mark notifications as read by the user. */
  mark_as_read_api_user_notification_patch: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Notification'][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MarkAsReadNotificationCommand'];
      };
    };
  };
  /** Install OTP. */
  set_otp_api_user_set_otp_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OTP'];
        };
      };
    };
  };
  /** Unplug OTP. */
  unplug_otp_api_user_unplug_otp_patch: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UnplugOTPCommand'];
      };
    };
  };
  /** Upload new user avatar. */
  update_avatar_api_user__user_id__avatar_post: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_update_avatar_api_user__user_id__avatar_post'];
      };
    };
  };
  /** Route for authorize. */
  auth_user_api_auth_login_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Auth'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthCommand'];
      };
    };
  };
  /** Get new tokens pair. */
  create_new_token_pair_api_auth_refresh_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Auth'];
        };
      };
    };
  };
  /** Read data from access token. */
  get_me_api_auth_me_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  /** Captcha. */
  captcha_api_auth_captcha_get: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['CaptchaWithoutValue'];
        };
      };
    };
  };
  /** Get all countries. */
  read_all_countries_api_country__get: {
    parameters: {
      query: {
        cities?: boolean;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CountriesWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific country. */
  read_country_api_country__country_id__get: {
    parameters: {
      path: {
        country_id: number;
      };
      query: {
        cities?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific country by name. */
  read_country_by_name_api_country__title__get: {
    parameters: {
      path: {
        title: string;
      };
      query: {
        cities?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get all cities. */
  read_all_cities_api_city__get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CitiesWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific city. */
  read_city_api_city__city_id__get: {
    parameters: {
      path: {
        city_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['City'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific city by name. */
  read_city_by_name_api_city__city_name__get: {
    parameters: {
      path: {
        city_name: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['City'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get all categories. */
  read_all_categories_api_category__get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CategoriesWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create category */
  create_category_api_category__post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['Category'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCategoryCommand'];
      };
    };
  };
  /** Read specific category by id. */
  read_category_api_category__category_id__get: {
    parameters: {
      path: {
        category_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Category'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific category by name. */
  read_category_by_name_api_category__category_name__get: {
    parameters: {
      path: {
        category_name: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Category'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get all subcategories. */
  read_all_subcategories_api_subcategory__get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SubcategoriesWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create subcategory */
  create_subcategory_api_subcategory__post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['Subcategory'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSubcategoryCommand'];
      };
    };
  };
  /** Read specific subcategory by id. */
  read_subcategory_api_subcategory__subcategory_id__get: {
    parameters: {
      path: {
        subcategory_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Subcategory'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read specific subcategory by name. */
  read_subcategory_by_name_api_subcategory__subcategory_name__get: {
    parameters: {
      path: {
        subcategory_name: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Subcategory'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get currency prices. */
  read_price_api_price__get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Price'];
        };
      };
    };
  };
  read_all_tickets_api_ticket_get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TicketsWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_ticket_api__post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['Ticket'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTicketCommand'];
      };
    };
  };
  create_ticket_response_api_ticket_response_post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['efmarketplace.db.models.ticket.TicketResponseModel.leaf'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTicketResponseCommand'];
      };
    };
  };
  read_ticket_api_ticket__ticket_id__get: {
    parameters: {
      path: {
        ticket_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Ticket'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Creates a notification for all users. */
  create_notification_for_all_api_admin_notification__post: {
    responses: {
      /** Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNotificationCommand'];
      };
    };
  };
  /** Creates notification for users. */
  create_notification_for_users_api_admin_notification_specific_post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['Notification'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNotificationUsersCommand'];
      };
    };
  };
  /** Read all user favorites. */
  read_all_favorites_api_favorites_all_get: {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FavoritesWithPagination'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Add user favorites. */
  add_favorite_api_favorites_add_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Favorite'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddFavoriteCommand'];
      };
    };
  };
  /** Delete user favorite. */
  del_favorite_api_favorites_delete_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Favorite'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DelFavoriteCommand'];
      };
    };
  };
  /** Add product in cart */
  add_product_to_cart_api_cart_add_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddItemToCart'];
      };
    };
  };
  /** Read product in cart */
  read_products_to_cart_api_cart__get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  /** Remove product from cart */
  remove_product_from_cart_api_cart_remove_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveProductFromCart'];
      };
    };
  };
  /** Read product reviews. */
  read_product_reviews_api_review__product_id__get: {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Review'][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get photo. */
  read_photo_api_photo__photo__get: {
    parameters: {
      path: {
        photo: string;
      };
    };
    responses: {
      /** Successful Response */
      200: unknown;
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** User Balance */
  user_balance_api_v1_pay_user__user_id__balance_get: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserBalanceResponseSchema'][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create Deal */
  create_deal_api_v1_pay_deal__post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DealCreateResponseSchema'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DealCreateSchema'];
      };
    };
  };
  confirm_deal_api_v1_pay_deal__deal_id__confirm_get: {
    parameters: {
      path: {
        deal_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DealConfirmResponseSchema'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  deny_deal_api_v1_pay_deal__deal_id__deny_get: {
    parameters: {
      path: {
        deal_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create Dispute */
  create_dispute_api_v1_pay_deal__deal_id__dispute_post: {
    parameters: {
      path: {
        deal_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DisputeCreateSchema'];
      };
    };
  };
  close_dispute_customer_api_v1_pay_deal__deal_id__dispute_close_customer_get: {
    parameters: {
      path: {
        deal_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  close_dispute_performer_api_v1_pay_deal__deal_id__dispute_close_performer_get: {
    parameters: {
      path: {
        deal_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  close_deal_api_v1_pay_deal__deal_id__close_get: {
    parameters: {
      path: {
        deal_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Payment Gateway List */
  gateways_list_api_v1_pay_payment_gateways_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentGatewayResponse'][];
        };
      };
    };
  };
  deposit_api_v1_pay_payment_deposit_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentDepositResponse'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentDepositRequest'];
      };
    };
  };
  withdraw_api_v1_pay_payment_withdraw_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentDepositResponse'];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentWithdrawRequest'];
      };
    };
  };
  /** Get all markets. */
  read_all_markets_api_market__get: {
    parameters: {
      query: {
        sort_by: components['schemas']['SortBy'];
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Market'][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Read market products. */
  read_market_products_api_market__market_id__products_get: {
    parameters: {
      path: {
        market_id: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Product'][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}

export interface external {}
